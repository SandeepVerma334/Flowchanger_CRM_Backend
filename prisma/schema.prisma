generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider  = "postgresql"
  url       = env("DATABASE_URL")
  // directUrl = env("DIRECT_URL")
}

model User {
  id            String             @id @default(dbgenerated("gen_random_uuid()"))
  email         String?            @unique
  password      String?
  firstName     String?
  lastName      String?
  mobile        String?
  mobile2       String?
  profileImage  String?
  role          UserType           @default(STAFF)
  isVerified    Boolean            @default(false)
  otp           Int?
  otpExpiresAt  DateTime?
  adminDetails  AdminDetails?
  superAdmin    SuperAdminDetails?
  StaffDetails  StaffDetails?
  Branch        Branch[]
  Department    Department[]
  Role          Role[]
  ClientDetails ClientDetails?
  packageId     String?
  package       Package?           @relation(fields: [packageId], references: [id], onDelete: SetNull)
  // adminId       String?            @unique @map("admin_id") // Ensure correct relation
  // admin         AdminDetails?      @relation(fields: [adminId], references: [id])
  projects      Project[]
  adminId       String?
  Note          Note[]

  // New relation for subordinates without an adminId
  subordinates                User[]                        @relation("UserSubordinates")
  managers                    User[]                        @relation("UserSubordinates")
  Discussion                  Discussion[]
  Report                      Report[]
  StaffEducationQualification StaffEducationQualification[]
}

model StaffDetails {
  id                String      @id @default(dbgenerated("gen_random_uuid()"))
  userId            String?     @unique
  User              User?       @relation(fields: [userId], references: [id], onDelete: Cascade)
  jobTitle          String?
  loginOtp          Int?
  gender            String?
  officialMail      String?
  offerLetter       String?
  birthCertificate  String?
  guarantorForm     String?
  degreeCertificate String?
  dateOfJoining     DateTime?   @default(now())
  dateOfBirth       String?
  employeeId        String?
  maritalStatus     String?
  cityOfresidence   String?
  address           String?
  branchId          String?
  departmentId      String?
  roleId            String?
  // adminId       String
  // Admin         AdminDetails @relation(fields: [adminId], references: [id], onDelete: Cascade)
  Branch            Branch?     @relation(fields: [branchId], references: [id], onDelete: Cascade)
  Department        Department? @relation(fields: [departmentId], references: [id], onDelete: Cascade)
  Role              Role?       @relation(fields: [roleId], references: [id], onDelete: Cascade)

  PunchRecords PunchRecords[]

  Fine Fine[]

  Overtime                    Overtime[]
  Project                     Project[]
  task                        Task[]
  adminId                     String?
  Admin                       AdminDetails?                 @relation(fields: [adminId], references: [id], onDelete: Cascade)
  StaffEducationQualification StaffEducationQualification[]
  FinancialDetails            FinancialDetails[]
  SalaryDetail                SalaryDetail[]
}

model SalaryDetail {
  id              String   @id @default(uuid())
  effectiveDate   DateTime
  salaryType      String
  salaryStructure String
  ctcAmount       Float    @default(0.0)

  earnings    Earnings?
  compliances Compliances?
  deductions  Deduction[]

  staffId   String?
  Staff     StaffDetails? @relation(fields: [staffId], references: [id], onDelete: Cascade)
  createdAt DateTime      @default(now())
  updatedAt DateTime      @updatedAt
}

model Earnings {
  id             String       @id @default(uuid())
  salaryDetailId String       @unique
  salaryDetail   SalaryDetail @relation(fields: [salaryDetailId], references: [id])

  basic      Float       @default(0.0)
  allowances Allowance[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Allowance {
  id         String   @id @default(uuid())
  earningsId String
  earnings   Earnings @relation(fields: [earningsId], references: [id])

  name   String
  amount Float  @default(0.0)

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Compliances {
  id             String       @id @default(uuid())
  salaryDetailId String       @unique
  salaryDetail   SalaryDetail @relation(fields: [salaryDetailId], references: [id])

  employerPF  Float @default(0.0)
  pfEdliAdmin Float @default(0.0)
  employerESI Float @default(0.0)
  employerLWF Float @default(0.0)

  employeePF      Float @default(0.0)
  employeeESI     Float @default(0.0)
  professionalTax Float @default(0.0)
  employeeLWF     Float @default(0.0)

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Deduction {
  id             String       @id @default(uuid())
  salaryDetailId String
  salaryDetail   SalaryDetail @relation(fields: [salaryDetailId], references: [id])

  name   String
  amount Float  @default(0.0)

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model StaffEducationQualification {
  id            String        @id @default(dbgenerated("gen_random_uuid()"))
  instituteName String?
  department    String?
  // Department    Department?   @relation(fields: [departmentId], references: [id], onDelete: Cascade)
  course        String?
  location      String?
  startDate     String?
  endDate       String?
  discription   String?
  staffId       String?
  adminId       String?
  AdminDetails  AdminDetails? @relation(fields: [adminId], references: [id], onDelete: Cascade)
  staffDetails  StaffDetails? @relation(fields: [staffId], references: [id], onDelete: Cascade)
  createdAt     DateTime      @default(now())
  updatedAt     DateTime      @default(now())
  User          User?         @relation(fields: [userId], references: [id])
  userId        String?
}

model FinancialDetails {
  id            String        @id @default(dbgenerated("gen_random_uuid()"))
  bankName      String?
  accountNumber String?
  accountName   String?
  ifscCode      String?
  branchName    String?
  pinCode       String?
  state         String?
  createdAt     DateTime      @default(now())
  updatedAt     DateTime      @default(now())
  staffId       String?
  staffDetails  StaffDetails? @relation(fields: [staffId], references: [id], onDelete: Cascade)
}

model Branch {
  id           String         @id @default(dbgenerated("gen_random_uuid()"))
  branchName   String
  createdAt    DateTime       @default(now())
  updatedAt    DateTime       @updatedAt
  adminId      String
  admin        User           @relation(fields: [adminId], references: [id], onDelete: Cascade)
  StaffDetails StaffDetails[]
}

model Department {
  id              String         @id @default(dbgenerated("gen_random_uuid()"))
  department_name String
  adminId         String
  admin           User           @relation(fields: [adminId], references: [id], onDelete: Cascade)
  staffs          StaffDetails[]
}

model Permissions {
  id                      String                 @id @default(dbgenerated("gen_random_uuid()"))
  roleId                  String?                @unique
  created_at              DateTime               @default(now())
  updated_at              DateTime               @updatedAt
  ai_permissions          AIPermissions?
  chat_module_permissions ChatModulePermissions?
  clients_permissions     ClientsPermissions?
  Role                    Role?                  @relation(fields: [roleId], references: [id], onDelete: Cascade)
  projects_permissions    ProjectsPermissions?
  report_permissions      ReportPermissions?
  settings_permissions    SettingsPermissions?
  staff_permissions       StaffPermissions?
  staff_role_permissions  StaffRolePermissions?
  sub_task_permissions    SubTaskPermissions?
  task_permissions        TaskPermissions?
}

model Role {
  id          String         @id @default(dbgenerated("gen_random_uuid()"))
  role_name   String
  created_at  DateTime       @default(now())
  updated_at  DateTime       @updatedAt
  permissions Permissions?
  staffs      StaffDetails[]
  adminId     String
  admin       User           @relation(fields: [adminId], references: [id], onDelete: Cascade)
}

model ClientsPermissions {
  id            String       @id @default(dbgenerated("gen_random_uuid()"))
  view_global   Boolean      @default(false)
  create        Boolean      @default(false)
  edit          Boolean      @default(false)
  delete        Boolean      @default(false)
  permissionsId String?      @unique
  created_at    DateTime     @default(now())
  updated_at    DateTime     @updatedAt
  Permissions   Permissions? @relation(fields: [permissionsId], references: [id], onDelete: Cascade)
}

model ProjectsPermissions {
  id            String       @id @default(dbgenerated("gen_random_uuid()"))
  view_global   Boolean      @default(false)
  create        Boolean      @default(false)
  edit          Boolean      @default(false)
  delete        Boolean      @default(false)
  permissionsId String?      @unique
  created_at    DateTime     @default(now())
  updated_at    DateTime     @updatedAt
  Permissions   Permissions? @relation(fields: [permissionsId], references: [id], onDelete: Cascade)
  // Project       Project[]
}

model ReportPermissions {
  id               String       @id @default(dbgenerated("gen_random_uuid()"))
  view_global      Boolean      @default(false)
  view_time_sheets Boolean      @default(false)
  permissionsId    String?      @unique
  created_at       DateTime     @default(now())
  updated_at       DateTime     @updatedAt
  Permissions      Permissions? @relation(fields: [permissionsId], references: [id], onDelete: Cascade)
}

model StaffRolePermissions {
  id            String       @id @default(dbgenerated("gen_random_uuid()"))
  view_global   Boolean      @default(false)
  create        Boolean      @default(false)
  edit          Boolean      @default(false)
  delete        Boolean      @default(false)
  permissionsId String?      @unique
  created_at    DateTime     @default(now())
  updated_at    DateTime     @updatedAt
  Permissions   Permissions? @relation(fields: [permissionsId], references: [id], onDelete: Cascade)
}

model SettingsPermissions {
  id               String       @id @default(dbgenerated("gen_random_uuid()"))
  view_global      Boolean      @default(false)
  view_time_sheets Boolean      @default(false)
  permissionsId    String?      @unique
  created_at       DateTime     @default(now())
  updated_at       DateTime     @updatedAt
  Permissions      Permissions? @relation(fields: [permissionsId], references: [id], onDelete: Cascade)
}

model StaffPermissions {
  id            String       @id @default(dbgenerated("gen_random_uuid()"))
  view_global   Boolean      @default(false)
  create        Boolean      @default(false)
  edit          Boolean      @default(false)
  delete        Boolean      @default(false)
  permissionsId String?      @unique
  created_at    DateTime     @default(now())
  updated_at    DateTime     @updatedAt
  Permissions   Permissions? @relation(fields: [permissionsId], references: [id], onDelete: Cascade)
}

model TaskPermissions {
  id            String       @id @default(dbgenerated("gen_random_uuid()"))
  view_global   Boolean      @default(false)
  create        Boolean      @default(false)
  edit          Boolean      @default(false)
  delete        Boolean      @default(false)
  permissionsId String?      @unique
  created_at    DateTime     @default(now())
  updated_at    DateTime     @updatedAt
  Permissions   Permissions? @relation(fields: [permissionsId], references: [id], onDelete: Cascade)
}

model SubTaskPermissions {
  id            String       @id @default(dbgenerated("gen_random_uuid()"))
  view_global   Boolean      @default(false)
  create        Boolean      @default(false)
  edit          Boolean      @default(false)
  delete        Boolean      @default(false)
  permissionsId String?      @unique
  created_at    DateTime     @default(now())
  updated_at    DateTime     @updatedAt
  Permissions   Permissions? @relation(fields: [permissionsId], references: [id], onDelete: Cascade)
}

model ChatModulePermissions {
  id            String       @id @default(dbgenerated("gen_random_uuid()"))
  grant_access  Boolean      @default(false)
  staff         Boolean      @default(false)
  client        Boolean      @default(false)
  permissionsId String?      @unique
  created_at    DateTime     @default(now())
  updated_at    DateTime     @updatedAt
  Permissions   Permissions? @relation(fields: [permissionsId], references: [id], onDelete: Cascade)
}

model AIPermissions {
  id            String       @id @default(dbgenerated("gen_random_uuid()"))
  grant_access  Boolean      @default(false)
  permissionsId String?      @unique
  created_at    DateTime     @default(now())
  updated_at    DateTime     @updatedAt
  Permissions   Permissions? @relation(fields: [permissionsId], references: [id], onDelete: Cascade)
}

model SuperAdminDetails {
  id        String   @id @default(dbgenerated("gen_random_uuid()"))
  email     String   @unique
  password  String
  name      String
  mobile    String
  role      UserType @default(SUPERADMIN)
  createdAt DateTime @default(now())
  updatedAt DateTime @default(now())
  userId    String?  @unique
  user      User?    @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model AdminDetails {
  id                          String                        @id @default(dbgenerated("gen_random_uuid()"))
  userId                      String                        @unique
  companyName                 String?
  companyLogo                 String?
  profileImage                String?
  timeFormat                  String?
  timeZone                    String?
  dateFormat                  String?
  weekFormat                  String?
  user                        User                          @relation(fields: [userId], references: [id], onDelete: Cascade)
  Subscription                Subscription[]
  packageId                   String? // Reference to Package model
  package                     Package?                      @relation(fields: [packageId], references: [id], onDelete: SetNull)
  Transaction                 Transaction[]
  adminId                     String?
  gender                      String?
  designation                 String?
  address                     String?
  city                        String?
  state                       String?
  zipCode                     String?
  country                     String?
  businessType                String?
  services                    String[]
  companySize                 String?
  role                        String?
  ClientDetails               ClientDetails[]
  StaffDetails                StaffDetails[]
  StaffEducationQualification StaffEducationQualification[]
}

model ClientDetails {
  id               String        @id @default(dbgenerated("gen_random_uuid()"))
  group            String
  currency         String
  defaultLanguage  String
  organizationName String
  website          String
  industriesField  String?
  gstNumber        String
  vatNumber        String
  panNumber        String
  pinCode          String
  city             String
  state            String
  country          String
  addressLine      String?
  adminId          String?
  adminDetails     AdminDetails? @relation(fields: [adminId], references: [id], onDelete: Cascade)
  userId           String        @unique
  user             User          @relation(fields: [userId], references: [id], onDelete: Cascade)
  Project          Project[]
}

model Project {
  id                   String               @id @default(uuid())
  projectName          String?
  // customer              String               @db.VarChar(255)
  progressBar          Int?
  estimatedHours       Int?
  members              StaffDetails[]
  startDate            DateTime?
  deadline             DateTime?
  description          String?
  sendMail             Boolean?
  createdAt            DateTime?            @default(now())
  updatedAt            DateTime?            @updatedAt
  customer             ClientDetails[]
  // customer             String[]
  // client               ClientDetails?       @relation(fields: [customer], references: [id], onDelete: Cascade)
  contactNotifications String[]
  visibleTabs          String[]
  userDetails          User[]
  // Add relation to ProjectPermissions
  ProjectPermissions   ProjectPermissions[]
  task                 Task[]
}

model Task {
  id                        String         @id @default(uuid())
  subject                   String?
  hourlyRate                String?
  startDate                 DateTime?
  dueDate                   DateTime?
  priority                  String?
  repeateEvery              String?
  relatedTo                 String?
  insertChecklishtTemplates String?
  postingDate               DateTime       @default(now())
  description               String?
  public                    Boolean?       @default(false)
  billable                  Boolean?       @default(false)
  attachFiles               String[]
  // assignedBy                String[]
  createdAt                 DateTime       @default(now())
  updatedAt                 DateTime       @updatedAt
  project                   Project?       @relation(fields: [projectId], references: [id], onDelete: Cascade)
  projectId                 String?
  StaffDetails              StaffDetails[]
}

model ProjectPermissions {
  id        String  @id @default(uuid())
  projectId String
  Project   Project @relation(fields: [projectId], references: [id], onDelete: Cascade)

  allowCustomerToViewTasks                Boolean?
  allowCustomerToCreateTasks              Boolean?
  allowCustomerToEditTasks                Boolean?
  allowCustomerToCommentOnProjectTasks    Boolean?
  allowCustomerToViewTaskComments         Boolean?
  allowCustomerToViewTaskAttachments      Boolean?
  allowCustomerToViewTaskChecklistItems   Boolean?
  allowCustomerToUploadAttachmentsOnTasks Boolean?
  allowCustomerToViewTaskTotalLoggedTime  Boolean?
  allowCustomerToViewFinanceOverview      Boolean?
  allowCustomerToUploadFiles              Boolean?
  allowCustomerToOpenDiscussions          Boolean?
  allowCustomerToViewMilestones           Boolean?
  allowCustomerToViewGantt                Boolean?
  allowCustomerToViewTimesheets           Boolean?
  allowCustomerToViewActivityLog          Boolean?
  allowCustomerToViewTeamMembers          Boolean?
}

model Subscription {
  id            String        @id @default(dbgenerated("gen_random_uuid()"))
  adminId       String // Reference to User model
  admin         AdminDetails  @relation(fields: [adminId], references: [id], onDelete: Cascade)
  packageId     String // Reference to Package model
  package       Package       @relation(fields: [packageId], references: [id], onDelete: Cascade)
  planType      String
  packageTenure String
  startDate     DateTime
  endDate       DateTime
  paymentMethod String
  paid          Boolean
  status        String
  price         Decimal       @default(0.00)
  createdAt     DateTime      @default(now())
  updatedAt     DateTime      @updatedAt
  Transaction   Transaction[]
}

model Package {
  id               String         @id @default(dbgenerated("gen_random_uuid()"))
  packageName      String
  packageNumber    Int?
  numberOfProjects Int
  price            Float
  storageLimit     Int
  unit             UnitType       @default(GB)
  numberOfClients  Int
  validityTerms    String[]
  description      String?
  modules          Module[]
  createdAt        DateTime       @default(now())
  updatedAt        DateTime       @updatedAt
  adminId          String?
  adminDetails     AdminDetails[]
  Subscription     Subscription[]
  User             User[]
}

model Module {
  id       String    @id @default(dbgenerated("gen_random_uuid()"))
  name     String    @unique
  packages Package[]
}

model Transaction {
  id             String            @id @default(dbgenerated("gen_random_uuid()"))
  subscriptionId String // Foreign Key
  subscription   Subscription      @relation(fields: [subscriptionId], references: [id], onDelete: Cascade)
  paymentId      String            @unique
  amount         Decimal
  currency       String
  paymentType    String
  disable        Boolean           @default(false)
  status         TransactionStatus @default(PENDING)
  message        String?
  invoiceUrl     String?
  dateCreated    DateTime          @default(now())
  updatedAt      DateTime          @updatedAt
  adminId        String
  admin          AdminDetails      @relation(fields: [adminId], references: [id], onDelete: Cascade)
}

model Note {
  id          String   @id @default(dbgenerated("gen_random_uuid()"))
  title       String
  description String?
  color       String?
  adminId     String?
  userId      String?
  user        User?    @relation(fields: [userId], references: [id], onDelete: Cascade)
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
}

model Discussion {
  id          String   @id @default(dbgenerated("gen_random_uuid()"))
  subject     String
  description String?
  tags        String[]
  attachFiles String[]
  adminId     String?
  userId      String?
  user        User?    @relation(fields: [userId], references: [id], onDelete: Cascade)
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
}

model Report {
  id          String       @id @default(dbgenerated("gen_random_uuid()"))
  name        String
  subject     String
  description String?
  status      ReportStatus @default(PENDING)
  token       String
  userId      String?
  adminId     String?
  user        User?        @relation(fields: [userId], references: [id], onDelete: Cascade)
  createdAt   DateTime     @default(now())
  updatedAt   DateTime     @updatedAt
}

enum ReportStatus {
  PENDING
  REJECTED
  RESOLVED
  IN_PROGRESS
  ESCALATED
}

enum UnitType {
  GB
  TB
  MB
}

enum UserType {
  ADMIN
  STAFF
  CLIENT
  SUPERADMIN
}

enum TransactionStatus {
  PENDING
  VERIFIED
  FAILED
  REFUNDED
}

enum PunchInMethod {
  BIOMETRIC
  QRSCAN
  PHOTOCLICK
}

enum PunchOutMethod {
  BIOMETRIC
  QRSCAN
  PHOTOCLICK
}

enum punchRecordStatus {
  ABSENT
  PRESENT
  // Add any other statuses you need here
}

model PunchIn {
  id            String         @id @default(dbgenerated("gen_random_uuid()"))
  punchInMethod PunchInMethod? @default(PHOTOCLICK)
  punchInTime   DateTime       @default(now())
  punchInDate   DateTime       @default(now())
  biometricData String?
  qrCodeValue   String?
  photoUrl      String?
  location      String?
  PunchRecords  PunchRecords?
  approve       String?        @default("Pending")
}

model PunchOut {
  id             String          @id @default(dbgenerated("gen_random_uuid()"))
  punchOutMethod PunchOutMethod? @default(PHOTOCLICK)
  punchOutTime   DateTime        @default(now())
  punchOutDate   DateTime        @default(now())
  biometricData  String?
  qrCodeValue    String?
  photoUrl       String?
  location       String?
  overtime       String?
  punchRecords   PunchRecords?
}

model PunchRecords {
  id         String            @id @default(dbgenerated("gen_random_uuid()"))
  punchDate  DateTime          @default(now())
  isApproved Boolean           @default(false)
  punchInId  String?           @unique
  punchOutId String?           @unique
  staffId    String?
  status     punchRecordStatus @default(ABSENT)
  fine       Fine?
  Overtime   Overtime?
  punchIn    PunchIn?          @relation(fields: [punchInId], references: [id], onDelete: Cascade)
  punchOut   PunchOut?         @relation(fields: [punchOutId], references: [id], onDelete: Cascade)
  staff      StaffDetails?     @relation(fields: [staffId], references: [id], onDelete: Cascade)

  @@unique([staffId, punchDate])
}

model Fine {
  id                       String        @id @default(dbgenerated("gen_random_uuid()"))
  lateEntryFineHoursTime   String?
  lateEntryFineAmount      Float?        @default(1)
  lateEntryAmount          Float?        @default(0)
  excessBreakFineHoursTime String?
  excessBreakFineAmount    Float?        @default(1)
  excessBreakAmount        Float?        @default(0)
  earlyOutFineHoursTime    String?
  earlyOutFineAmount       Float?        @default(1)
  earlyOutAmount           Float?        @default(0)
  totalAmount              Float?        @default(0)
  punchRecordId            String        @unique
  staffId                  String?
  createdAt                DateTime      @default(now())
  punchRecord              PunchRecords  @relation(fields: [punchRecordId], references: [id], onDelete: Cascade)
  staff                    StaffDetails? @relation(fields: [staffId], references: [id], onDelete: Cascade)
}

model Overtime {
  id                         String        @id @default(dbgenerated("gen_random_uuid()"))
  earlyCommingEntryHoursTime String?
  earlyCommingEntryAmount    Float?        @default(1)
  earlyEntryAmount           Float?        @default(0)
  lateOutOvertimeHoursTime   String?
  lateOutOvertimeAmount      Float?        @default(1)
  lateOutAmount              Float?        @default(0)
  totalAmount                Float?        @default(0)
  punchRecordId              String?       @unique
  staffId                    String?
  punchRecord                PunchRecords? @relation(fields: [punchRecordId], references: [id], onDelete: Cascade)
  staff                      StaffDetails? @relation(fields: [staffId], references: [id], onDelete: Cascade)
}
