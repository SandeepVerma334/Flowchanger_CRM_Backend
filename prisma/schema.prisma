generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
  // directUrl = env("DIRECT_URL")
}

model User {
  id           String             @id @default(dbgenerated("gen_random_uuid()"))
  email        String             @unique
  password     String?
  name         String?
  mobile       String?
  role         UserType           @default(STAFF)
  is_verified  Boolean            @default(false)
  otp          Int?
  otpExpiresAt DateTime?
  adminDetails AdminDetails?
  superAdmin   SuperAdminDetails?
  adminId      String? // Foreign key to reference a manager User
  admin        User?              @relation("UserAdmin", fields: [adminId], references: [id], onDelete: Cascade) // One Admin
  subordinates User[]             @relation("UserAdmin") // Many subordinates
}

model SuperAdminDetails {
  id        String   @id @default(dbgenerated("gen_random_uuid()"))
  email     String   @unique
  password  String
  role      UserType @default(SUPERADMIN)
  createdAt DateTime @default(now())
  updatedAt DateTime @default(now())
  userId    String   @unique
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model AdminDetails {
  id            String         @id @default(dbgenerated("gen_random_uuid()"))
  userId        String         @unique
  package_id    String?
  company_name  String?
  company_logo  String?
  profile_image String?
  time_format   String?
  time_zone     String?
  date_format   String?
  week_format   String?
  user          User           @relation(fields: [userId], references: [id], onDelete: Cascade)
  Subscription  Subscription[]
  packageId     String? // Reference to Package model
  package       Package?       @relation(fields: [packageId], references: [id], onDelete: SetNull)

  adminId     String?
  gender      String?
  designation String
  address     String
  city        String
  state       String
  zipCode     String
  country     String
}

model Subscription {
  id            String       @id @default(dbgenerated("gen_random_uuid()"))
  adminId       String // Reference to User model
  admin         AdminDetails @relation(fields: [adminId], references: [id], onDelete: Cascade)
  packageId     String // Reference to Package model
  package       Package      @relation(fields: [packageId], references: [id], onDelete: Cascade)
  planType      String
  packageTenure String
  startDate     DateTime
  endDate       DateTime
  paymentMethod String
  paid          Boolean
  status        String
  price         Decimal      @default(0.00)
  createdAt     DateTime     @default(now())
  updatedAt     DateTime     @updatedAt
}

model Package {
  id               String         @id @default(uuid())
  packageName      String
  packageNumber    String         @unique
  numberOfProjects Int
  price            Float
  storageLimit     Int
  unit             UnitType
  numberOfClients  Int
  validityTerms    String // Can store values like "Monthly, Quarterly, Yearly"
  description      String?
  modules          Module[]
  createdAt        DateTime       @default(now())
  updatedAt        DateTime       @updatedAt
  adminId          String?
  adminDetails     AdminDetails[]
  Subscription     Subscription[]
}

model Module {
  id       String    @id @default(uuid())
  name     String    @unique
  packages Package[]
}

enum UnitType {
  GB
  TB
  MB
}

enum UserType {
  ADMIN
  STAFF
  CLIENT
  SUPERADMIN
}
