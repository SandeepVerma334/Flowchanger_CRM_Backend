generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider  = "postgresql"
  url       = env("DATABASE_URL")
  directUrl = env("DIRECT_URL")
}

model User {
  id            String             @id @default(dbgenerated("gen_random_uuid()"))
  email         String             @unique
  password      String?
  firstName     String?
  lastName      String?
  mobile        String?
  profileImage  String?
  role          UserType           @default(STAFF)
  isVerified    Boolean            @default(false)
  otp           Int?
  otpExpiresAt  DateTime?
  adminDetails  AdminDetails?
  superAdmin    SuperAdminDetails?
  adminId       String? // Foreign key to reference a manager User
  admin         User?              @relation("UserAdmin", fields: [adminId], references: [id], onDelete: Cascade) // One Admin
  subordinates  User[]             @relation("UserAdmin") // Many subordinates
  StaffDetails  StaffDetails?
  Branch        Branch[]
  Department    Department[]
  Role          Role[]
  ClientDetails ClientDetails?
}

model StaffDetails {
  id            String     @id @default(dbgenerated("gen_random_uuid()"))
  userId        String     @unique
  User          User       @relation(fields: [userId], references: [id], onDelete: Cascade)
  jobTitle      String?
  loginOtp      Int?
  gender        String?
  officialMail  String?
  dateOfJoining DateTime?
  dateOfBirth   DateTime?
  employeeId    String?
  maritalStatus String?
  address       String?
  branchId      String
  departmentId  String
  roleId        String
  // adminId       String
  // Admin         AdminDetails @relation(fields: [adminId], references: [id], onDelete: Cascade)
  Branch        Branch     @relation(fields: [branchId], references: [id], onDelete: Cascade)
  Department    Department @relation(fields: [departmentId], references: [id], onDelete: Cascade)
  Role          Role       @relation(fields: [roleId], references: [id], onDelete: Cascade)
}

model Branch {
  id           String         @id @default(dbgenerated("gen_random_uuid()"))
  branchName   String
  createdAt    DateTime       @default(now())
  updatedAt    DateTime       @updatedAt
  adminId      String
  admin        User           @relation(fields: [adminId], references: [id], onDelete: Cascade)
  StaffDetails StaffDetails[]
}

model Department {
  id              String         @id @default(dbgenerated("gen_random_uuid()"))
  department_name String
  adminId         String
  admin           User           @relation(fields: [adminId], references: [id], onDelete: Cascade)
  staffs          StaffDetails[]
}

model Permissions {
  id                      String                 @id @default(dbgenerated("gen_random_uuid()"))
  roleId                  String?                @unique
  created_at              DateTime               @default(now())
  updated_at              DateTime               @updatedAt
  ai_permissions          AIPermissions?
  chat_module_permissions ChatModulePermissions?
  clients_permissions     ClientsPermissions?
  Role                    Role?                  @relation(fields: [roleId], references: [id], onDelete: Cascade)
  projects_permissions    ProjectsPermissions?
  report_permissions      ReportPermissions?
  settings_permissions    SettingsPermissions?
  staff_permissions       StaffPermissions?
  staff_role_permissions  StaffRolePermissions?
  sub_task_permissions    SubTaskPermissions?
  task_permissions        TaskPermissions?
}

model Role {
  id          String         @id @default(dbgenerated("gen_random_uuid()"))
  role_name   String
  created_at  DateTime       @default(now())
  updated_at  DateTime       @updatedAt
  permissions Permissions?
  staffs      StaffDetails[]
  adminId     String
  admin       User           @relation(fields: [adminId], references: [id], onDelete: Cascade)
}

model ClientsPermissions {
  id            String       @id @default(dbgenerated("gen_random_uuid()"))
  view_global   Boolean      @default(false)
  create        Boolean      @default(false)
  edit          Boolean      @default(false)
  delete        Boolean      @default(false)
  permissionsId String?      @unique
  created_at    DateTime     @default(now())
  updated_at    DateTime     @updatedAt
  Permissions   Permissions? @relation(fields: [permissionsId], references: [id], onDelete: Cascade)
}

model ProjectsPermissions {
  id            String       @id @default(dbgenerated("gen_random_uuid()"))
  view_global   Boolean      @default(false)
  create        Boolean      @default(false)
  edit          Boolean      @default(false)
  delete        Boolean      @default(false)
  permissionsId String?      @unique
  created_at    DateTime     @default(now())
  updated_at    DateTime     @updatedAt
  Permissions   Permissions? @relation(fields: [permissionsId], references: [id], onDelete: Cascade)
}

model ReportPermissions {
  id               String       @id @default(dbgenerated("gen_random_uuid()"))
  view_global      Boolean      @default(false)
  view_time_sheets Boolean      @default(false)
  permissionsId    String?      @unique
  created_at       DateTime     @default(now())
  updated_at       DateTime     @updatedAt
  Permissions      Permissions? @relation(fields: [permissionsId], references: [id], onDelete: Cascade)
}

model StaffRolePermissions {
  id            String       @id @default(dbgenerated("gen_random_uuid()"))
  view_global   Boolean      @default(false)
  create        Boolean      @default(false)
  edit          Boolean      @default(false)
  delete        Boolean      @default(false)
  permissionsId String?      @unique
  created_at    DateTime     @default(now())
  updated_at    DateTime     @updatedAt
  Permissions   Permissions? @relation(fields: [permissionsId], references: [id], onDelete: Cascade)
}

model SettingsPermissions {
  id               String       @id @default(dbgenerated("gen_random_uuid()"))
  view_global      Boolean      @default(false)
  view_time_sheets Boolean      @default(false)
  permissionsId    String?      @unique
  created_at       DateTime     @default(now())
  updated_at       DateTime     @updatedAt
  Permissions      Permissions? @relation(fields: [permissionsId], references: [id], onDelete: Cascade)
}

model StaffPermissions {
  id            String       @id @default(dbgenerated("gen_random_uuid()"))
  view_global   Boolean      @default(false)
  create        Boolean      @default(false)
  edit          Boolean      @default(false)
  delete        Boolean      @default(false)
  permissionsId String?      @unique
  created_at    DateTime     @default(now())
  updated_at    DateTime     @updatedAt
  Permissions   Permissions? @relation(fields: [permissionsId], references: [id], onDelete: Cascade)
}

model TaskPermissions {
  id            String       @id @default(dbgenerated("gen_random_uuid()"))
  view_global   Boolean      @default(false)
  create        Boolean      @default(false)
  edit          Boolean      @default(false)
  delete        Boolean      @default(false)
  permissionsId String?      @unique
  created_at    DateTime     @default(now())
  updated_at    DateTime     @updatedAt
  Permissions   Permissions? @relation(fields: [permissionsId], references: [id], onDelete: Cascade)
}

model SubTaskPermissions {
  id            String       @id @default(dbgenerated("gen_random_uuid()"))
  view_global   Boolean      @default(false)
  create        Boolean      @default(false)
  edit          Boolean      @default(false)
  delete        Boolean      @default(false)
  permissionsId String?      @unique
  created_at    DateTime     @default(now())
  updated_at    DateTime     @updatedAt
  Permissions   Permissions? @relation(fields: [permissionsId], references: [id], onDelete: Cascade)
}

model ChatModulePermissions {
  id            String       @id @default(dbgenerated("gen_random_uuid()"))
  grant_access  Boolean      @default(false)
  staff         Boolean      @default(false)
  client        Boolean      @default(false)
  permissionsId String?      @unique
  created_at    DateTime     @default(now())
  updated_at    DateTime     @updatedAt
  Permissions   Permissions? @relation(fields: [permissionsId], references: [id], onDelete: Cascade)
}

model AIPermissions {
  id            String       @id @default(dbgenerated("gen_random_uuid()"))
  grant_access  Boolean      @default(false)
  permissionsId String?      @unique
  created_at    DateTime     @default(now())
  updated_at    DateTime     @updatedAt
  Permissions   Permissions? @relation(fields: [permissionsId], references: [id], onDelete: Cascade)
}

model SuperAdminDetails {
  id        String   @id @default(dbgenerated("gen_random_uuid()"))
  email     String   @unique
  password  String
  name      String
  mobile    String
  role      UserType @default(SUPERADMIN)
  createdAt DateTime @default(now())
  updatedAt DateTime @default(now())
  userId    String?  @unique
  user      User?    @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model AdminDetails {
  id            String          @id @default(dbgenerated("gen_random_uuid()"))
  userId        String          @unique
  companyName   String?
  companyLogo   String?
  profileImage  String?
  timeFormat    String?
  timeZone      String?
  dateFormat    String?
  weekFormat    String?
  user          User            @relation(fields: [userId], references: [id], onDelete: Cascade)
  Subscription  Subscription[]
  packageId     String? // Reference to Package model
  package       Package?        @relation(fields: [packageId], references: [id], onDelete: SetNull)
  Transaction   Transaction[]
  adminId       String?
  gender        String?
  designation   String?
  address       String?
  city          String?
  state         String?
  zipCode       String?
  country       String?
  businessType  String?
  services      String[]
  companySize   String?
  role          String?
  ClientDetails ClientDetails[]

  // StaffDetails StaffDetails[]
}

model ClientDetails {
  id               String        @id @default(dbgenerated("gen_random_uuid()"))
  group            String
  currency         String
  defaultLanguage  String
  organizationName String
  website          String
  industriesField  String?
  gstNumber        String
  vatNumber        String
  panNumber        String
  pinCode          String
  city             String
  state            String
  country          String
  addressLine      String?
  adminId          String?
  adminDetails     AdminDetails? @relation(fields: [adminId], references: [id], onDelete: Cascade)
  userId           String        @unique
  user             User          @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model Subscription {
  id            String        @id @default(dbgenerated("gen_random_uuid()"))
  adminId       String // Reference to User model
  admin         AdminDetails  @relation(fields: [adminId], references: [id], onDelete: Cascade)
  packageId     String // Reference to Package model
  package       Package       @relation(fields: [packageId], references: [id], onDelete: Cascade)
  planType      String
  packageTenure String
  startDate     DateTime
  endDate       DateTime
  paymentMethod String
  paid          Boolean
  status        String
  price         Decimal       @default(0.00)
  createdAt     DateTime      @default(now())
  updatedAt     DateTime      @updatedAt
  Transaction   Transaction[]
}

model Package {
  id               String         @id @default(uuid())
  packageName      String
  packageNumber    Int?
  numberOfProjects Int
  price            Float
  storageLimit     Int
  unit             UnitType       @default(GB)
  numberOfClients  Int
  validityTerms    String[]
  description      String?
  modules          Module[]
  createdAt        DateTime       @default(now())
  updatedAt        DateTime       @updatedAt
  adminId          String?
  adminDetails     AdminDetails[]
  Subscription     Subscription[]
}

model Module {
  id       String    @id @default(uuid())
  name     String    @unique
  packages Package[]
}

model Transaction {
  id             String            @id @default(uuid())
  subscriptionId String // Foreign Key
  subscription   Subscription      @relation(fields: [subscriptionId], references: [id], onDelete: Cascade)
  paymentId      String            @unique
  amount         Decimal
  currency       String
  paymentType    String
  disable        Boolean           @default(false)
  status         TransactionStatus @default(PENDING)
  message        String?
  invoiceUrl     String?
  dateCreated    DateTime          @default(now())
  updatedAt      DateTime          @updatedAt
  adminId        String
  admin          AdminDetails      @relation(fields: [adminId], references: [id], onDelete: Cascade)
}

enum UnitType {
  GB
  TB
  MB
}

enum UserType {
  ADMIN
  STAFF
  CLIENT
  SUPERADMIN
}

enum TransactionStatus {
  PENDING
  VERIFIED
  FAILED
  REFUNDED
}
