generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
  // directUrl = env("DIRECT_URL")s
}

model User {
  id            String             @id @default(dbgenerated("gen_random_uuid()"))
  email         String             @unique
  password      String?
  firstName     String?
  lastName      String?
  mobile        String?
  role          UserType           @default(STAFF)
  is_verified   Boolean            @default(false)
  otp           Int?
  otpExpiresAt  DateTime?
  adminDetails  AdminDetails?
  superAdmin    SuperAdminDetails?
  adminId       String? // Foreign key to reference a manager User
  admin         User?              @relation("UserAdmin", fields: [adminId], references: [id], onDelete: Cascade) // One Admin
  subordinates  User[]             @relation("UserAdmin") // Many subordinates
  clientDetails ClientDetails?
}

model SuperAdminDetails {
  id        String   @id @default(dbgenerated("gen_random_uuid()"))
  email     String   @unique
  password  String
  name      String
  mobile    String
  role      UserType @default(SUPERADMIN)
  createdAt DateTime @default(now())
  updatedAt DateTime @default(now())
  userId    String?  @unique
  user      User?    @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model AdminDetails {
  id            String          @id @default(dbgenerated("gen_random_uuid()"))
  userId        String          @unique
  package_id    String?
  company_name  String?
  company_logo  String?
  profile_image String?
  time_format   String?
  time_zone     String?
  date_format   String?
  week_format   String?
  user          User            @relation(fields: [userId], references: [id], onDelete: Cascade)
  Subscription  Subscription[]
  packageId     String? // Reference to Package model
  package       Package?        @relation(fields: [packageId], references: [id], onDelete: SetNull)
  Transaction   Transaction[]
  adminId       String?
  gender        String?
  designation   String?
  address       String?
  city          String?
  state         String?
  zipCode       String?
  country       String?
  businessType  String?
  services      String[]
  companySize   String?
  role          String?
  ClientDetails ClientDetails[]
}

model ClientDetails {
  id               String       @id @default(dbgenerated("gen_random_uuid()"))
  group            String
  currency         String
  defaultLanguage  String
  organizationName String
  website          String
  industriesField  String?
  gstNumber        String
  vatNumber        String
  panNumber        String
  pinCode          String
  city             String
  state            String
  country          String
  addressLine      String?
  adminId          String?
  adminDetails     AdminDetails? @relation(fields: [adminId], references: [id], onDelete: Cascade)
  userId           String       @unique
  user             User         @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model Subscription {
  id            String       @id @default(dbgenerated("gen_random_uuid()"))
  adminId       String // Reference to User model
  admin         AdminDetails @relation(fields: [adminId], references: [id], onDelete: Cascade)
  packageId     String // Reference to Package model
  package       Package      @relation(fields: [packageId], references: [id], onDelete: Cascade)
  planType      String
  packageTenure String
  startDate     DateTime
  endDate       DateTime
  paymentMethod String
  paid          Boolean
  status        String
  price         Decimal      @default(0.00)
  createdAt     DateTime     @default(now())
  updatedAt     DateTime     @updatedAt

  Transaction Transaction[]
}

model Package {
  id               String         @id @default(uuid())
  packageName      String
  packageNumber    Int?
  numberOfProjects Int
  price            Float
  storageLimit     Int
  unit             UnitType       @default(GB)
  numberOfClients  Int
  validityTerms    String[]
  description      String?
  modules          Module[]
  createdAt        DateTime       @default(now())
  updatedAt        DateTime       @updatedAt
  adminId          String?
  adminDetails     AdminDetails[]
  Subscription     Subscription[]
}

model Module {
  id       String    @id @default(uuid())
  name     String    @unique
  packages Package[]
}

model Transaction {
  id             String            @id @default(uuid())
  subscriptionId String // Foreign Key
  subscription   Subscription      @relation(fields: [subscriptionId], references: [id], onDelete: Cascade)
  paymentId      String            @unique
  amount         Decimal
  currency       String
  paymentType    String
  disable        Boolean           @default(false)
  status         TransactionStatus @default(PENDING)
  message        String?
  invoiceUrl     String?
  dateCreated    DateTime          @default(now())
  updatedAt      DateTime          @updatedAt
  adminId        String
  admin          AdminDetails      @relation(fields: [adminId], references: [id], onDelete: Cascade)
}

enum UnitType {
  GB
  TB
  MB
}

enum UserType {
  ADMIN
  STAFF
  CLIENT
  SUPERADMIN
}

enum TransactionStatus {
  PENDING
  VERIFIED
  FAILED
  REFUNDED
}
